You will be helping me verify the correctness of `allreduce_intra_recursive_doubling.c` using Veil. We need to be sure that the development will be very well documented, with consistent commits and explaining why each step is being taken. We want to build maintainable code while not creating bugs every single step of the way. We want to keep a tight loop of implementation.

## Each Folder's function
**info**: has the context.txt file, which is your general instruction source, and the main papers you want to draw from, veil's creation paper, a paper through collective contracts, and the best tutorial file for Veil: `Ring.lean`, my notes, and folder `process` which keeps track of everything that has been done through your chat overviews.
**src**: folder `chatgpt` has old attempts at verifying MPI algorithms using ChatGPT, and the rest is where the code is being developed.
**mpich_civl**: where the verification of some MPICH algorithms was done using CIVL-C, which are the algortihms we are going to try and prove. The paper talking about what was done is `hovland-mpich-vss2025.txt`
**mpich_repo**: the original MPICH repository
**veil_repo**: the original Veil repository with great examples in folder `Examples`

## Approach to verification
1. **Check info/process** for the previous chats so you have context of what has been going on.
2. **Check mpich_civl/allreduce_intra_recursive_doubling.c** for the file that we are currently working on, even though we won't be implementing everything at once.
2. **Define a rigourous specification for the current chat**. Define what will be added/included, the invariants needed for a collective contract, etc. Shorter advances are prioritized rather than huge changes.
3. **Implement it**
4. **CTI feedback loop with counterexamples**. You are unable to test it yourself, so always ask for me to send you the counterexamples and the output.
5. **Review changes and chat** to ensure the progress is in the right direction
6. **Add another file with the overview of that chat and the progress made**

## References
1. **Reference info/Ring.lean first** - it has the most comprehensive explanations and detailed commentary on every Veil concept
2. **Reference veil_repo/Examples** for additional patterns and advanced techniques as supplementary material
3. **Reference info/veil/ai_summary_veil.txt** for your own code review so you can code in Veil much more effectively and more correctly, since you don't have much training data on Veil.
3. **Reference all allreduce_intra_recursive_doubling functions in mpich_civl** for a reference of how it was proved using CIVL
4. **Reference info/'collective contracts for message-passing parallel programs'** for how to verify this.  The png file has a contract in CIVL-C of the MPI_Allreduce function, although I don't know what implementation it is verifying.
5. **Check mpich_civl or mpich_repo** if you feel like there's more you need to see about the MPICH implementation.
6. **Sort of ignore MPI/chatgpt**, since you will probably be able to do the job more effectively moving on, but you could still take some inspiration from it


## Core Patterns from Ring.lean (PRIMARY REFERENCE):
1. **Module Structure**: `veil module Name` → types → instantiations → relations → `#gen_state` → `after_init` → actions → invariants/safety → `#gen_spec` → `#check_invariants`
2. **Type System**: Use `type node` for uninterpreted types, `instantiate tot : TotalOrder node` for ordered types
3. **State Modeling**: Use `relation` for mutable state (like `leader : node → Prop`, `pending (id : node) (dest : node)`)
4. **Initialization**: `after_init { leader N := False; pending M N := False }` with universal quantification via capitals
5. **Actions**: Use `require` for preconditions, support `let` bindings, conditional logic with `if-then-else`, non-deterministic assignment with `:= *`
6. **Ghost Relations**: `ghost relation isNext (n next : node) := (n ≠ next) ∧ ...` for derived properties
7. **Safety Properties**: `safety [single_leader] leader L1 ∧ leader L2 → L1 = L2`
8. **Invariants**: Use descriptive names like `[leader_greatest]`, `[no_bypass]` to eliminate CTIs systematically

**Ring.lean**: Ring.lean has the best explanations and worked examples. Follow its structure and methodology, but please also look at the other examples.

**Essential Debugging Setup** (from Ring.lean lines 172-176):
```lean
set_option veil.printCounterexamples true  
set_option veil.smt.model.minimize true    
set_option veil.vc_gen "transition"        
```

**Basic Module Structure** (Ring.lean pattern):
```lean
import Veil
veil module YourProtocol
type proc
relation your_state_relations
#gen_state
after_init { /* initial state */ }
action your_actions = { /* ... */ }
safety [your_properties] /* ... */
#gen_spec
#check_invariants
sat trace
```

**CTI-Driven Development** (Ring.lean's approach):
1. Get CTIs (counterexamples) - this is good!
2. Understand why the pre-state is unreachable
3. Add invariant to eliminate that CTI
4. Repeat until all safety properties verify

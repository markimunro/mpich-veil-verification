FOURTH PASS: The Struggle to Correctly Specify Recursive Doubling Allreduce
===========================================================================

## CONTEXT AND MOTIVATION

After three previous attempts at verifying the recursive doubling allreduce algorithm, I realized the fundamental issue: we were creating abstract consensus models without actually understanding the specific C implementation we were trying to verify. The insight was that verification requires understanding the EXACT algorithm, not just the general concept.

This fourth pass was an attempt to:
1. Go line-by-line through the C implementation
2. Create a rigid specification that separates abstractions from core elements
3. Build a Veil model that actually captures the recursive doubling mechanics
4. Focus on the specific C code rather than generic allreduce properties

## THE JOURNEY: DETAILED HISTORY

### Phase 1: Line-by-Line C Code Analysis

I started by meticulously analyzing every line of `mpich_civl/allreduce_intra_recursive_doubling.c`:

**Variables Analyzed:**
- `rank`: Process identifier (0 to comm_size-1)
- `comm_size`: Total number of processes
- `mask`: Bitmask progression (0x1, 0x2, 0x4, 0x8, ...)
- `dst`: Target process for communication (rank ^ mask)
- `is_commutative`: Boolean affecting operand ordering
- `pof2`: Largest power of 2 ≤ comm_size
- `rem`: Remainder processes (comm_size - pof2)
- `newrank`: Virtual rank in power-of-2 subgroup
- Memory management variables (true_extent, true_lb, extent, tmp_buf)
- Error handling variables (mpi_errno, errflag)

**Algorithm Structure Identified:**
```c
mask = 0x1;
while (mask < pof2) {
    newdst = newrank ^ mask;  // XOR partner finding
    dst = (newdst < rem) ? newdst * 2 + 1 : newdst + rem;  // Rank mapping
    
    MPIC_Sendrecv(...);  // Simultaneous exchange
    
    if (is_commutative || (dst < rank)) {
        MPIR_Reduce_local(tmp_buf, recvbuf, ...);
    } else {
        MPIR_Reduce_local(recvbuf, tmp_buf, ...);
        // Copy result back
    }
    mask <<= 1;  // Double the mask
}
```

### Phase 2: Scope Decisions and Specification Creation

I created `fourth_pass_spec.txt` with clear decisions about what to abstract away vs. what to model:

**ABSTRACTIONS (Never modeling):**
- Datatype complexity (true_extent, true_lb, extent, tmp_buf)
- Buffer management and memory allocation
- Error handling (mpi_errno, errflag, memory tracking)
- Low-level MPI internals

**DEFERRED (Adding later):**
- Non-power-of-2 process counts (lines 54-81, 120-131)
- In-place operations (MPI_IN_PLACE)
- Communicator details beyond size

**CORE ELEMENTS (Must model now):**
- Process ranks and XOR partner calculation
- Mask progression (0x1, 0x2, 0x4, 0x8, ...)
- Atomic sendrecv operations
- Commutativity handling in reduction
- Round-based algorithm progression

### Phase 3: Initial Veil Implementation

I completely rewrote the Veil file to match the C algorithm structure:

```lean
-- Types
type proc
type value

-- Algorithm Parameters
immutable function comm_size : Unit → Nat
immutable function is_commutative : Unit → Bool

-- Core State Relations
relation has_value (p : proc) (v : value)
relation received_value (p : proc) (v : value)
relation current_mask (mask : Nat)
relation completed_round (p : proc)
relation completed_algorithm (p : proc)
relation participating (p : proc)

-- Actions
action start_allreduce (p : proc)
action initialize_mask
action sendrecv (p1 p2 : proc) (v1 v2 : value) (mask : Nat)
action combine_values (p : proc) (v_local v_received : value)
action advance_mask (old_mask new_mask : Nat)
action complete_algorithm (mask : Nat)
```

### Phase 4: The Counterexample Nightmare

The initial model had multiple counterexamples:

**First Round of Issues:**
- `sendrecv_tr_progress`: Progress property violated after sendrecv
- `combine_values_tr_consensus`: Already completed processes breaking consensus
- `complete_algorithm_tr_consensus`: Algorithm completing without consensus

**Fixes Applied:**
- Changed progress property to allow `received_value` during temporary states
- Added `require ¬completed_algorithm p` to prevent completed processes from combining
- Added consensus check before completing algorithm

**Second Round of Issues:**
- `sendrecv_tr_completed_no_received`: Completed processes participating in sendrecv
- `complete_algorithm_tr_consensus`: Still consensus violations
- `complete_algorithm_tr_completed_no_received`: Completing with unprocessed received values

**Additional Fixes:**
- Added `require ¬completed_algorithm p1 ∧ ¬completed_algorithm p2` to sendrecv
- Strengthened consensus checks in complete_algorithm
- Added requirements to ensure no received values before completion

### Phase 5: The Fundamental Flaws Discovered

Despite fixing counterexamples, I discovered CRITICAL issues:

**1. Broken sendrecv → combine_values Flow:**
```lean
-- In sendrecv:
has_value p1 v1 := False    -- Process loses its value
received_value p1 v2 := True -- Process gets partner's value

-- In combine_values:
require has_value p v_local  -- ❌ BUT WE JUST SET THIS TO FALSE!
```

**2. Termination Logic Not Implemented:**
- `advance_mask`: requires `new_mask < comm_size()` 
- `complete_algorithm`: requires `mask >= comm_size()`
- But no actual loop termination logic implemented

**3. Verification Passing Despite Broken Logic:**
- The model was so underspecified that Veil found trivial ways to satisfy properties
- Processes could "complete" without actually doing recursive doubling
- Safety properties satisfied vacuously

## CHALLENGES AND FRUSTRATIONS

### 1. Modeling Decisions Without Clear Guidance

**Type vs Relation Confusion:**
- Why use `immutable function comm_size : Unit → Nat` instead of `relation comm_size (n : Nat)`?
- What's the difference between `ghost relation` and `immutable relation`?
- When to use functions vs relations vs instantiations?

**No Clear Patterns:**
- Ring.lean uses different patterns than other examples
- Veil documentation insufficient for complex algorithms
- Had to guess at modeling choices

### 2. The Verification Mirage

**False Sense of Progress:**
- Counterexamples getting fixed didn't mean the model was correct
- Verification passing could mean the model was trivial, not correct

**Fundamental Questions:**
- How do you know your Veil model actually captures the C algorithm?
- How do you prevent over-abstraction that makes verification meaningless?
- When are you verifying the algorithm vs. verifying your misunderstanding of it?

### 3. Tool Limitations and Learning Curve

**Veil-Specific Challenges:**
- Steep learning curve with limited documentation

## THE BREAKING POINT

The final straw was discovering that the model was fundamentally broken:

1. **The sendrecv flow was impossible** - processes couldn't combine values after exchanging them
2. **The termination logic was fake** - advance_mask and complete_algorithm had incompatible requirements
3. **The verification was meaningless** - passing tests didn't mean the algorithm was correct

**Key Realization:**
> "If the algorithm logic isn't properly implemented, the verification results are meaningless. The model is a paper tiger - it looks like it's verifying recursive doubling but it's actually verifying some trivial consensus protocol."

## DECISION TO GO MANUAL

After this tiring experience with Cursor, I've decided to try a more manual approach:

1. **Manual algorithm tracing** - work through the C code step by step
2. **Explicit state tracking** - document every variable and state change and be sure I am making the correct decisions for each variable
3. **Incremental verification** - verify small pieces before building up
4. **Less abstraction** - keep more of the C algorithm structure visible

The goal is to build confidence that I understand the algorithm correctly before trying to verify it formally. The automated verification tools are only as good as the understanding of the person using them.

## CURRENT STATUS

- **Veil Model**: Fundamentally broken, needs complete rewrite
- **Understanding**: Much better grasp of C algorithm details
- **Specification**: Good documentation of scope decisions
- **Verification**: Need to start over with manual approach

The fourth pass taught me that verification is not just about using the right tools - it's about deeply understanding the algorithm you're trying to verify. No amount of Veil expertise can substitute for algorithmic understanding.

## NEXT STEPS

1. Manual tracing of recursive doubling with concrete examples
2. Explicit documentation of all state changes
3. Simple test cases to verify understanding
4. Only then attempt formal verification with corrected model

The frustration of this pass was worth it for the insight that understanding must precede verification, not the other way around. 